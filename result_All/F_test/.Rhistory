# 3. 计算加权Kappa统计量
# 使用平方权重（对较大差异给予更高惩罚）
weighted_kappa <- kappa2(ratings, weight = "squared")
# 4. 使用Bootstrap计算置信区间
set.seed(123)  # 确保结果可重现
kappa_fun <- function(data, indices) {
d <- data[indices, ]
k_result <- kappa2(d, weight = "squared")
return(k_result$value)
}
boot_results <- boot(ratings, kappa_fun, R = 2000)
ci <- boot.ci(boot_results, type = "bca")
# 5. 安全地打印结果
cat("\n===== 加权Kappa分析结果 =====\n")
cat("加权Kappa值:", round(weighted_kappa$value, 3), "\n")
# 安全处理标准误和Z值
if(is.numeric(weighted_kappa$statistic)) {
cat("标准误:", round(weighted_kappa$statistic, 4), "\n")
} else {
cat("标准误: 无法计算\n")
}
if(is.numeric(weighted_kappa$z)) {
cat("Z值:", round(weighted_kappa$z, 2), "\n")
} else {
cat("Z值: 无法计算\n")
}
# 安全处理P值
if(is.numeric(weighted_kappa$p.value)) {
cat("P值:", round(weighted_kappa$p.value, 4), "\n")
} else {
cat("P值: 无法计算\n")
}
# 输出Bootstrap置信区间
if(!is.null(ci$bca)) {
cat("Bootstrap 95%置信区间: [", round(ci$bca[4], 3), ", ", round(ci$bca[5], 3), "]\n\n")
} else {
cat("Bootstrap置信区间: 无法计算\n\n")
}
# 6. 一致性解释
interpret_kappa <- function(k) {
if(is.na(k)) return("无法计算")
if(k < 0) return("一致性比随机猜测还差")
else if(k <= 0.2) return("极低一致性")
else if(k <= 0.4) return("一般一致性")
else if(k <= 0.6) return("中等一致性")
else if(k <= 0.8) return("高度一致性")
else return("几乎完全一致")
}
cat("一致性水平:", interpret_kappa(weighted_kappa$value), "\n")
# 7. 可视化分析
## 7.1 一致性矩阵热力图
conf_matrix <- table(ratings$WJM, ratings$ZP)
conf_df <- as.data.frame(conf_matrix)
colnames(conf_df) <- c("WJM", "ZP", "Count")
ggplot(conf_df, aes(x = WJM, y = ZP, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), color = "black", size = 4) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "评分一致性热力图",
subtitle = paste("加权Kappa =", round(weighted_kappa$value, 3)),
x = "WJM评分", y = "ZP评分") +
theme_minimal() +
theme(legend.position = "right")
## 7.2 评分差异分布图
# 转换为数值型（保留原始顺序）
ratings$WJM_num <- as.numeric(ratings$WJM)
ratings$ZP_num <- as.numeric(ratings$ZP)
ratings$Difference <- ratings$WJM_num - ratings$ZP_num
ggplot(ratings, aes(x = Difference)) +
geom_histogram(binwidth = 1, fill = "dodgerblue", alpha = 0.7) +
geom_vline(xintercept = mean(ratings$Difference),
color = "red", linetype = "dashed", linewidth = 1) +
labs(title = "评分差异分布",
subtitle = paste("平均差异 =", round(mean(ratings$Difference), 3)),
x = "WJM评分 - ZP评分", y = "频数") +
theme_bw()
## 7.3 增强型散点图
# 添加相关系数（即使没有Z值）
cor_value <- cor(ratings$WJM_num, ratings$ZP_num, use = "complete.obs")
ggplot(ratings, aes(x = WJM_num, y = ZP_num)) +
geom_jitter(width = 0.15, height = 0.15, alpha = 0.6, color = "darkgreen") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
annotate("text", x = min(ratings$WJM_num), y = max(ratings$ZP_num),
label = paste("相关系数 =", round(cor_value, 3)),
hjust = 0, vjust = 1, size = 5) +
labs(title = "评分者一致性散点图",
subtitle = paste("加权Kappa =", round(weighted_kappa$value, 3)),
x = "WJM评分", y = "ZP评分") +
theme_minimal()
## 7.4 Bland-Altman图（带置信区间）
ratings$Avg <- (ratings$WJM_num + ratings$ZP_num)/2
mean_diff <- mean(ratings$Difference, na.rm = TRUE)
sd_diff <- sd(ratings$Difference, na.rm = TRUE)
# 确保有足够数据点绘制BA图
if(nrow(ratings) > 2 && !is.na(sd_diff)) {
ba_plot <- ggplot(ratings, aes(x = Avg, y = Difference)) +
geom_point(alpha = 0.7, color = "purple", size = 3) +
geom_hline(yintercept = mean_diff, color = "blue", linetype = "dashed", linewidth = 1) +
geom_hline(yintercept = mean_diff + 1.96*sd_diff, color = "red", linewidth = 0.8) +
geom_hline(yintercept = mean_diff - 1.96*sd_diff, color = "red", linewidth = 0.8) +
geom_hline(yintercept = 0, color = "darkgreen", linewidth = 0.8) +
labs(title = "Bland-Altman分析图",
subtitle = "展示评分差异与平均水平的关系",
x = "平均评分", y = "评分差异(WJM - ZP)") +
theme_bw()
# 添加标注（如果有足够空间）
if(diff(range(ratings$Avg)) > 0) {
ba_plot <- ba_plot +
annotate("text", x = max(ratings$Avg), y = mean_diff,
label = paste("平均差 =", round(mean_diff, 1)),
vjust = -1,hjust = 1, color = "blue") +
annotate("text", x = max(ratings$Avg), y = mean_diff + 1.96*sd_diff,
label = "+1.96 SD", vjust = -1, hjust = 1,color = "red") +
annotate("text", x = max(ratings$Avg), y = mean_diff - 1.96*sd_diff,
label = "-1.96 SD", vjust = -1, hjust = 1,color = "red")
}
print(ba_plot)
} else {
cat("\n无法绘制Bland-Altman图：数据不足\n")
}
# 加载必要的包
library(tidyverse)
library(ggpubr)
library(rstatix)
library(PMCMRplus)
# 1. 读取数据
score_data <- read_csv("score.csv")
setwd("D:/Users/ZhuanZ(无密码)/Desktop/图文大模型/F_test")
# 加载必要的包
library(tidyverse)
library(ggpubr)
library(rstatix)
library(PMCMRplus)
# 1. 读取数据
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
# 加载必要的包
library(tidyverse)
library(ggpubr)
library(rstatix)
library(PMCMRplus)
# 1. 读取数据
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
print(friedman_test)
# 1. 读取数据
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
# 1. 读取数据
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
# 1. 读取数据
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
setwd("D:/Users/ZhuanZ(无密码)/Desktop/图文大模型/F_test")
score_data <- read_csv("score.csv")
# 2. 数据预处理
score_data <- score_data %>%
mutate(
Group = as.factor(Group),
CaseID = as.factor(CaseID)
)
# 3. 输出基本数据信息
cat("=== 数据概览 ===\n")
cat("数据集行数:", nrow(score_data), "\n")
cat("组别数量:", nlevels(score_data$Group), "\n")
cat("题目数量:", nlevels(score_data$CaseID), "\n")
cat("组别分布:\n")
print(table(score_data$Group))
# 4. 描述性统计分析
cat("\n=== 描述性统计 ===\n")
desc_stats <- score_data %>%
group_by(Group) %>%
summarise(
N = n(),
Median = median(Sc),
Q1 = quantile(Sc, 0.25),
Q3 = quantile(Sc, 0.75),
Mean = mean(Sc),
SD = sd(Sc),
.groups = 'drop'
)
print(desc_stats)
# 5. Friedman检验
cat("\n=== Friedman检验 ===\n")
friedman_test <- score_data %>%
friedman_test(Sc ~ Group | CaseID)
print(friedman_test)
# 6. 可视化1: 数据分布
cat("\n=== 可视化1: 数据分布图 ===\n")
dist_plot <- ggplot(score_data, aes(x = Group, y = Sc, fill = Group)) +
geom_boxplot(alpha = 0.7, width = 0.6) +
geom_jitter(width = 0.2, size = 1.8, alpha = 0.5, color = "gray30") +
geom_hline(yintercept = median(score_data$Sc), linetype = "dashed", color = "red", alpha = 0.5) +
labs(title = "四组模型评分分布",
subtitle = "箱线图展示各组评分分布",
x = "模型组",
y = "评分") +
theme_minimal(base_size = 14) +
theme(legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(dist_plot)
#ggsave("1_data_distribution.png", dist_plot, width = 8, height = 6, dpi = 300)
# 7. 事后检验（如果Friedman检验显著）
if(friedman_test$p < 0.05) {
cat("\n=== Friedman检验显著(p < 0.05)，进行事后两两比较 ===\n")
# 使用Nemenyi检验进行两两比较
posthoc_test <- frdAllPairsNemenyiTest(Sc ~ Group | CaseID, data = score_data)
pval_matrix <- posthoc_test$p.value
# 提取并打印所有配对比较结果
comparisons <- combn(levels(score_data$Group), 2, simplify = FALSE)
cat("\n两两比较结果:\n")
results_df <- data.frame()
for(comp in comparisons) {
group1 <- comp[1]
group2 <- comp[2]
# 确保顺序正确（行名在前，列名在后）
if(group1 %in% rownames(pval_matrix) && group2 %in% colnames(pval_matrix)) {
pval <- pval_matrix[group1, group2]
} else if(group2 %in% rownames(pval_matrix) && group1 %in% colnames(pval_matrix)) {
pval <- pval_matrix[group2, group1]
} else {
pval <- NA
}
if(!is.na(pval)) {
sig_symbol <- ifelse(pval < 0.001, "***",
ifelse(pval < 0.01, "**",
ifelse(pval < 0.05, "*", "ns")))
cat(sprintf("%s vs %s: p = %.4f %s\n", group1, group2, pval, sig_symbol))
# 添加到结果数据框
results_df <- rbind(results_df, data.frame(
group1 = group1,
group2 = group2,
p = pval,
p.signif = sig_symbol
))
}
}
# 8. 可视化2: 两两比较结果
cat("\n=== 可视化2: 两两比较结果 ===\n")
# 创建带显著性标记的箱线图
comparisons_plot <- ggplot(score_data, aes(x = Group, y = Sc, fill = Group)) +
geom_boxplot(alpha = 0.7, width = 0.6) +
stat_summary(fun = median, geom = "point", shape = 18, size = 4, color = "black") +
labs(title = "四组模型评分比较与显著性差异",
subtitle = paste("Friedman检验: χ²(", friedman_test$df, ") = ",
round(friedman_test$statistic, 2),
", p = ", format.pval(friedman_test$p, digits = 3)),
x = "模型组",
y = "评分",
caption = "黑色菱形表示中位数\n* p < 0.05, ** p < 0.01, *** p < 0.001") +
theme_minimal(base_size = 14) +
theme(legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# 添加显著性标记
y_max <- max(score_data$Sc) * 1.1
y_step <- (max(score_data$Sc) - min(score_data$Sc)) * 0.1
for(i in 1:nrow(results_df)) {
group1 <- results_df$group1[i]
group2 <- results_df$group2[i]
pval <- results_df$p[i]
sig_symbol <- results_df$p.signif[i]
if(sig_symbol != "ns") {
comparisons_plot <- comparisons_plot +
geom_signif(
comparisons = list(c(group1, group2)),
annotations = sig_symbol,
y_position = y_max,
tip_length = 0.01,
textsize = 6,
vjust = 0.5
)
# 增加y位置，避免重叠
y_max <- y_max + y_step
}
}
print(comparisons_plot)
ggsave("2_pairwise_comparisons.png", comparisons_plot, width = 9, height = 7, dpi = 300)
# 9. 可视化3: 组间差异热力图
cat("\n=== 可视化3: 组间差异热力图 ===\n")
# 创建p值矩阵用于热力图
group_levels <- levels(score_data$Group)
pval_df <- expand.grid(Group1 = group_levels, Group2 = group_levels) %>%
mutate(
p_value = apply(., 1, function(x) {
if(x[1] == x[2]) return(NA)
if(x[1] %in% rownames(pval_matrix) && x[2] %in% colnames(pval_matrix)) {
pval_matrix[x[1], x[2]]
} else if(x[2] %in% rownames(pval_matrix) && x[1] %in% colnames(pval_matrix)) {
pval_matrix[x[2], x[1]]
} else NA
}),
log_p = ifelse(is.na(p_value), NA, -log10(p_value)),
significance = case_when(
p_value < 0.001 ~ "***",
p_value < 0.01 ~ "**",
p_value < 0.05 ~ "*",
TRUE ~ "ns"
)
)
heatmap_plot <- ggplot(pval_df, aes(x = Group1, y = Group2, fill = log_p)) +
geom_tile(color = "white", size = 1) +
geom_text(aes(label = significance), color = "black", size = 6) +
scale_fill_gradient2(
low = "white",
high = "red",
na.value = "gray90",
name = "-log10(p-value)",
limits = c(0, max(pval_df$log_p, na.rm = TRUE))
) +
labs(title = "组间差异显著性热力图",
subtitle = "颜色越红表示差异越显著",
x = "模型组",
y = "模型组") +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
panel.grid.major = element_blank())
print(heatmap_plot)
ggsave("3_significance_heatmap.png", heatmap_plot, width = 8, height = 7, dpi = 300)
} else {
cat("\nFriedman检验不显著(p > 0.05)，无需进行事后检验\n")
# 创建基础箱线图（无显著性标记）
no_sig_plot <- ggplot(score_data, aes(x = Group, y = Sc, fill = Group)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 4, color = "black") +
labs(title = "四组模型评分比较",
subtitle = paste("Friedman检验: χ²(", friedman_test$df, ") = ",
round(friedman_test$statistic, 2),
", p = ", format.pval(friedman_test$p, digits = 3)),
x = "模型组",
y = "评分",
caption = "黑色菱形表示中位数\n各组间无显著差异") +
theme_minimal(base_size = 14) +
theme(legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
print(no_sig_plot)
ggsave("no_significant_differences.png", no_sig_plot, width = 8, height = 6, dpi = 300)
}
# 10. 可视化4: 评分分布密度图
cat("\n=== 可视化4: 评分分布密度图 ===\n")
density_plot <- ggplot(score_data, aes(x = Sc, fill = Group)) +
geom_density(alpha = 0.6, color = 1) +             #color：修改线的颜色
facet_wrap(~ Group, ncol = 3) +
labs(title = "各组评分分布密度",
subtitle = "展示每组评分的分布特征",
x = "评分",
y = "密度") +
theme_minimal(base_size = 14) +
theme(legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.text = element_text(size = 12, face = "bold"))
print(density_plot)
#ggsave("4_score_density.png", density_plot, width = 10, height = 8, dpi = 300)
cat("\n分析完成! 所有结果和图表已保存到工作目录。\n")
setwd("D:/Users/ZhuanZ(无密码)/Desktop/图文大模型/F_test")
